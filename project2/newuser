#!/bin/bash

if [[ $EUID -ne 0 ]]; then  
    echo "$0 is not running as root. Use sudo."
    exit 2
fi

USER_HOME="/home/$SUDO_USER" 
HOME=$USER_HOME


tutorial() {
    echo "   Please try again"
    echo "   type '-a' <groupname> to set additional groups"
    echo "   type '-u' <user> to set the username"
    echo "   type '-s' <shell> to set the shell"
    echo "   e.g. sudo ./newuser -a bluelock -u isagiyoichi -s /bin/bash"
    exit 1
}

PASSWD() {
    if [[ -n $USER ]]; then 
        passwd $USER 

        if [ $? -eq 0 ]; then  
        echo "yippee"

        else
            PASSWD_ERROR_HANDLING
        fi
    fi
}


PASSWD_ERROR_HANDLING() {
    if [ $? -eq 1 ]; then #Checks what the exit status it to find errors. I copied this from the manual of passwd (man passwd).
        echo "Permission denied"
    elif [ $? -eq 2 ]; then
        echo "Invalid combination of options"
    elif [ $? -eq 3 ]; then
        echo "Unexpected failure, nothing done"
    elif [ $? -eq 4 ]; then
        echo "Unexpected failure, passwd file missing"
    elif [ $? -eq 5 ]; then
        echo "Passwd file busy, try again"
    elif [ $? -eq 6 ]; then
        echo "Invalid argument to option"
    fi
}

ADDITIONAL_GROUPS=""
USER=""
SHELL=""

    while getopts ":a:u:s:" opt; do 
        case "${opt}" in
        a) 
        ADDITIONAL_GROUPS=$OPTARG
        ;;
        u) 
        USER=$OPTARG
        ;;
        s) 
        SHELL=$OPTARG
        ;;
        *) 
        tutorial
        ;;
        esac
    done

#checks if user already exists, then exits
if id "$USER"; then
    echo "User $USER already exists."
    exit 1
fi

NEW_UID="1000"
GID="1000"

#gets the next available user id
#uses cut and to get the third field of the passwd file (the user id), uses -f3. and -d specifies the delimiter (which is ":", it is used to seperate the fields in the user's information that is stored in /etc/passwd). found from man cut 
for uid in $(cut -f3 -d: /etc/passwd); do 
    if [[ $uid -ge $NEW_UID ]]; then #compares the UID to the uid variable, if the UID is greater than or equal to the uid variable, then it adds to the UID by 1 (for a unique user ID)
        NEW_UID=$(( uid+1 ))
    fi
done


for gid in $(cut -f3 -d: /etc/group); do #same as above but for the group ID (group id is in the fourth field of the group file, so -f4 instead) 
    if [[ $gid -ge $GID ]]; then
        GID=$(( gid+1 ))
    fi
done

#add user to the to a primary group named after themselves
cat >> /etc/group <<- EOF
$USER:x:$GID:$USER
EOF

#appends the user information to /etc/passwd, the user information is the username, user id, group id, home directory, and shell. 
cat >> /etc/passwd <<- EOF
$USER:x:$NEW_UID:$GID::/home/$USER:$SHELL
EOF


# Create the user's home directory and copies /etc/skel to the user's home directory
mkdir -p "/home/$USER" #-p is for creating the parent directories
cp -r /etc/skel/ "/home/$USER/" #-r is for copying a directory recursively, which will also copy all content. found from man cp
chown -R $USER:$USER "/home/$USER" #like above but for changing the owner of the directory. found from man chown



#if the user added an additional group in getopts, then it adds the user to the group
if [[ -n $ADDITIONAL_GROUPS ]]; then 
    if grep "^$ADDITIONAL_GROUPS:" /etc/group; then #^ is used because I only want the beginning of the line in /etc/group which is the group name

    # s substitutes anything after the group name (so this is needed if there are already users in the group) and $ is used to indicate the end of the line. 
        sed "/^$ADDITIONAL_GROUPS:/s/$/$USER/" /etc/group 

    else
        cat >> /etc/group <<- EOF #creates the group if it doesn't exist
$ADDITIONAL_GROUPS:x:$GID:$USER
EOF
    fi
fi

#set the password for the user
PASSWD
